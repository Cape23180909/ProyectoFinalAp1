@page "/Deudor/Edit/{DeudorId:int}"
@inject DeudorService deudorService
@inject NavigationManager navigationManager
@inject ToastService toastService
@rendermode InteractiveServer

<PageTitle>Modificar Deudor</PageTitle>
<EditForm Model="deudor" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <Toasts class="p-3" Messages="Mensaje" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />
    <div class="container-fluid pt-5 mt-5 d-flex flex-column justify-content-center">
        <div class="card shadow-lg w-100">
            <div class="card-header custom-header">
                <h3 class="card-title text-center w-100">Modificar Deudor</h3>
            </div>

            <div class="card-body">
                <div class="row">
                    @*DeudorId *@
                    <div class="col-md-6 mb-4">
                        <label for="deudorId" class="form-label"><strong>DeudorId:</strong></label>
                        <InputNumber id="deudorId" class="form-control" readonly @bind-Value="deudor.DeudorId" />
                        <ValidationMessage For="@(() => deudor.DeudorId)" />
                    </div>
                    @*Número Cédula *@
                    <div class="col-md-6 mb-4">
                        <label for="cedula" class="form-label"><strong>Número Cédula:</strong></label>
                        <InputText id="cedula" class="form-control" placeholder="Ingrese el numero de cédula" @bind-Value="deudor.NumeroCedula" />
                        <ValidationMessage For="@(() => deudor.NumeroCedula)" />
                    </div>
                </div>

                <div class="row">
                    @* Foto Cédula *@
                    <div class="col-md-6 mb-4">
                        <label for="foto" class="form-label"><strong>Foto Cédula:</strong></label>
                        <InputText id="foto" class="form-control" placeholder="Ingrese la URL de la foto de su cédula" @bind-Value="deudor.FotoCedulaURL" />
                        <ValidationMessage For="@(() => deudor.FotoCedulaURL)" />
                    </div>
                    @*  Nombres *@
                    <div class="col-md-6 mb-4">
                        <label for="nombres" class="form-label"><strong>Nombres:</strong></label>
                        <InputText id="nombres" class="form-control" placeholder="Ingrese los nombres" @bind-Value="deudor.Nombres" />
                        <ValidationMessage For="@(() => deudor.Nombres)" />
                    </div>
                </div>

                <div class="row">
                    @* Apellidos *@
                    <div class="col-md-6 mb-4">
                        <label for="apellidos" class="form-label"><strong>Apellidos:</strong></label>
                        <InputText id="apellidos" class="form-control" placeholder="Ingrese los apellidos" @bind-Value="deudor.Apellidos" />
                        <ValidationMessage For="@(() => deudor.Apellidos)" />
                    </div>
                    @*  Dirección  *@
                    <div class="col-md-6 mb-4">
                        <label for="direccion" class="form-label"><strong>Dirección:</strong></label>
                        <InputText id="direccion" class="form-control" placeholder="Ingrese la dirección" @bind-Value="deudor.Direccion" />
                        <ValidationMessage For="@(() => deudor.Direccion)" />
                    </div>
                </div>

                <div class="row">
                    @* Teléfono *@
                    <div class="col-md-6 mb-4">
                        <label for="telefono" class="form-label"><strong>Teléfono:</strong></label>
                        <InputText id="telefono" class="form-control" placeholder="Ingrese el teléfono" @bind-Value="deudor.Telefono" />
                        <ValidationMessage For="@(() => deudor.Telefono)" />
                    </div>
                    @* Ciudad*@
                    <div class="col-md-6 mb-4">
                        <label for="ciudad" class="form-label"><strong>Ciudad:</strong></label>
                        <InputText id="ciudad" class="form-control" placeholder="Ingrese la ciudad" @bind-Value="deudor.Ciudad" />
                        <ValidationMessage For="@(() => deudor.Ciudad)" />
                    </div>
                </div>
            </div>

            <div class="card-footer justify-content-center text-center custom-footer mt-5 pt-4">
                <div class="btn-group">
                    <button type="button" @onclick="Nuevo" class="btn btn-outline-primary">
                        <span class="bi bi-plus-circle-fill mt-3"></span>
                        Nuevo
                    </button>
                    <button type="submit" class="btn btn-outline-success">
                        <span class="bi bi-floppy mt-3"></span>
                        Guardar
                    </button>
                    <button type="button" @onclick="Volver" class="btn btn-outline-danger">
                        <span class="bi bi-arrow-left-circle-fill mt-3"></span>
                        Volver
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int DeudorId { get; set; }
    public Deudores deudor { get; set; } = new Deudores();
    private bool existe = false;
    List<ToastMessage> Mensaje = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        if (DeudorId > 0)
        {
            await Buscar();
        }
    }
    public async Task Nuevo()
    {
        deudor = new Deudores();
        existe = false;

        toastService.Notify(new ToastMessage(
          ToastType.Info,
          iconName: IconName.None,
          title: "Nuevo Registro",
          helpText: "",
          message: "Formulario preparado para un nuevo registro."));
        await Task.Delay(3000);
    }
    public async Task Buscar()
    {
        existe = false;
        var encontrado = await deudorService.Buscar(DeudorId);
        if (encontrado != null)
        {
            deudor = encontrado;
        }
        else
        {
            Nuevo();
        }
    }
    public async Task<bool> Validar()
    {
        var Listadeudores = await deudorService.Listar(C => C.Nombres == deudor.Nombres && C.DeudorId != deudor.DeudorId);
        return Listadeudores.Count == 0;
    }
    public async Task Guardar()
    {
        if (!await Validar())
        {
            toastService.Notify(new ToastMessage(
            ToastType.Danger,
            iconName: IconName.None,
            title: "Error",
            helpText: "",
            message: "Ya existe un deudor con este ID."));
            await Task.Delay(3000);
            return;
        }
        var guadado = await deudorService.Guardar(deudor);
        if (guadado)
        {
            toastService.Notify(new ToastMessage(
                ToastType.Success,
                iconName: IconName.None,
                title: "Éxito",
                message: "El Deudor se ha guardado correctamente."));
            await Task.Delay(3000);
            Volver();
        }
    }
    public async Task Volver()
    {
        toastService.Notify(new ToastMessage(
              ToastType.Primary,
              iconName: IconName.None,
              title: "Volver",
              helpText: "",
              message: "El Deudor ya volvio correctamente."));
        await Task.Delay(3000);
        navigationManager.NavigateTo("/Deudore/Index");
    }
    private void ShowToast(ToastType type)
    {
        string title = type switch
        {
            ToastType.Success => "¡Éxito!",
            ToastType.Primary => "Advertencia",
            ToastType.Danger => "Error",
            _ => "Información"
        };

        string message = type switch
        {
            ToastType.Success => "El Deudor se ha guardado correctamente.",
            ToastType.Primary => "El Deudor ya volvio correctamente.",
            ToastType.Danger => "Hubo un error al guardar el Deudor.",
            _ => "Información general."
        };

        Mensaje.Add(new ToastMessage { Type = type, Title = title, Message = message });
        StateHasChanged();
    }
}