@page "/Abono/Create"
@inject AbonoService abonoService
@inject FacturaService FacturaService
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@inject ToastService toastService

<PageTitle>Consulta de abonos</PageTitle>
<EditForm Model="abono" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="container-fluid vh-100 d-flex flex-column justify-content-center">
        <div class="card shadow-lg w-100 h-100">
            <div class="card-header d-flex justify-content-between align-items-center " style="background-color: #008DD9; color: #fff;">
                <h3 class="card-title text-center w-100">Registrar de Pagos</h3>
            </div>

            <div class="card-body">
                <div class="row">
                    @*   AbonoId *@
                    <div class="col-md-10 mb-5">
                        <label for="AbonoId " class="form-label"><strong>AbonoId :</strong></label>
                        <div class="input-group">
                            <div style="width: 40%; height: 1mm;">
                                <InputNumber @bind-Value="abono.AbonoId" class="form-control" disabled />
                            </div>
                        </div>
                    </div>

                    @*   MontoAbono *@
                    <div class="mb-5">
                        <label for=" MontoAbono" class="form-label"><strong> MontoAbono:</strong></label>
                        <InputNumber @bind-Value="abono.MontoAbono" class="form-control" />
                        <ValidationMessage For="@(()=>abono.MontoAbono)" />
                    </div>

                    @*   FechaAbono *@
                    <div class="mb-5">
                        <label for="FechaAbono" class="form-label"><strong>FechaAbono:</strong></label>
                        <InputDate @bind-Value="abono.FechaAbono" class="form-control" />
                        <ValidationMessage For="@(()=>abono.FechaAbono)" />
                    </div>

                    <div class="card-footer justify-content-center text-center">
                        <div class="btn-group">
                            <button type="button" @onclick="Nuevo" class="btn btn-outline-primary">
                                <span class="bi bi-plus-circle-fill mt-3"></span>
                                Nuevo
                            </button>
                            <button type="submit" class="btn btn-outline-success">
                                <span class="bi bi-floppy mt-3"></span>
                                Guardar
                            </button>
                            <button type="button" @onclick="Volver" class="btn btn-outline-danger">
                                <span class="bi bi-arrow-left-circle-fill mt-3"></span>
                                Volver
                            </button>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int AbonoId { get; set; }
    public Abonos? abono = new Abonos();
    public Facturas? facturas { get; set; } = new Facturas();
    public List<Facturas> listafactura = new List<Facturas>();
    public List<Abonos> listaabono = new List<Abonos>();
    private bool existe = false;

    public async Task Nuevo()
    {
        abono = new Abonos();
        existe = false;
    }
  

    public async Task Buscar()
    {
        existe = false;
        var encontrado = await abonoService.Buscar(abono.AbonoId);
        if (encontrado != null)
        {
            abono = encontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task<bool> Validar()
    {
        existe = await abonoService.Existe(abono.AbonoId);
        return !existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            toastService.Notify(new(ToastType.Warning, "Advertencia", "El abono ya existe."));
            return;
        }

        var guardado = await abonoService.Guardar(abono);
        if (guardado)
        {
            toastService.Notify(new(ToastType.Success, "Éxito", "El abono se guardó correctamente."));

        }
    }


    public async Task Volver()
    {

        toastService.Notify(new(ToastType.Primary, "Existo", "Ya volvio correctamente"));
        navigationManager.NavigateTo("/Abono/Index");
    }
}

