@page "/prestamo/SeleccionarDeudor"
@inject DeudorService deudorService
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@inject ToastService toastService

<PageTitle>Seleccionar Deudor</PageTitle>
<div class="container-fluid vh-100 d-flex flex-column justify-content-center" style="background-color: #C6C6C0;">
    <div class="card shadow-lg w-100 h-100" style="border-color: #4A667F;">
        <div class="card-header d-flex justify-content-between align-items-center" style="background-color: #008DD9; color: #FFFFFF;">
            <h3 class="card-title text-center w-100">Consulta de Deudores</h3>
        </div>
        <Toasts class="p-3" Messages="Mensaje" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />
        <div class="card-body overflow-auto">
            <div class="row mb-4 align-items-end">
                <div class="col-md-4">
                    <label for="Filtro" class="form-label"><strong>Filtrar por:</strong></label>
                    <select @bind="filtro" class="form-select" style="border-color: #4A667F;">
                        <option value="0">Seleccione una opción</option>
                        <option value="Cedula">Cédula</option>
                        <option value="Nombres">Nombres</option>
                        <option value="Apellidos">Apellidos</option>
                        <option value="Ciudad">Ciudad</option>
                    </select>
                </div>

                <div class="col-md-6">
                    <label for="ValorFiltro" class="form-label"<strong>Búsqueda:</strong></label>
                    <div class="input-group">
                        <input @bind="valorFiltro" class="form-control" placeholder="Buscar" style="border-color: #4A667F;" />
                        <button @onclick="Buscar" class="btn btn-outline-primary">
                            <span class="bi bi-search"></span> Buscar
                        </button>
                    </div>
                </div>
            </div>

            <table class="table text-center">
                <thead>
                    <tr>
                        <th>ClienteId</th>
                        <th>Cédula</th>
                        <th>Nombres</th>
                        <th>Apellidos</th>
                        <th>Dirección</th>
                        <th>Teléfono</th>
                        <th>Ciudad</th>
                        <th>Seleccionar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var deudor in listardeudor)
                    {
                        <tr>
                            <td>@deudor.DeudorId</td>
                            <td>@deudor.NumeroCedula</td>
                            <td>@deudor.Nombres</td>
                            <td>@deudor.Apellidos</td>
                            <td>@deudor.Direccion</td>
                            <td>@deudor.Telefono</td>
                            <td>@deudor.Ciudad</td>
                            <td class="text-center">
                                <input type="checkbox" @onclick="() => NavegarASeleccionarPrestamo(deudor.DeudorId)" style="width: 1.5em; height: 1.5em; border-color: #4A667F;" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="card-footer d-flex justify-content-between" style="background-color: #4A667F; color: #FFFFFF;">
            <p class="mb-0">Total de clientes: @listardeudor.Count</p>
        </div>
    </div>
</div>

@code {
    private List<Deudores> listardeudor = new List<Deudores>();
    public string filtro = "0";
    public string valorFiltro = "";
    List<ToastMessage> Mensaje = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        listardeudor = await deudorService.ListarDeudores();
    }

    private async Task NavegarASeleccionarPrestamo(int deudorid)
    {
        toastService.Notify(new ToastMessage(
        ToastType.Danger,
        iconName: IconName.None,
        title: "Deudor Seleccionado",
        helpText: "Se ha seleccionado un deudor para el préstamo.",
        message: "Ahora puedes proceder a crear un préstamo para este deudor."));
        await Task.Delay(3000);
        navigationManager.NavigateTo($"/Prestamo/Create?deudorid={deudorid}");
    }

    public async Task Buscar()
    {
        if (string.IsNullOrWhiteSpace(valorFiltro))
        {
            listardeudor = await deudorService.Listar(p => true);
        }
        else if (filtro == "Cedula")
        {
            listardeudor = await deudorService.Listar(c => c.NumeroCedula.Contains(valorFiltro));
        }
        else if (filtro == "Nombres")
        {
            listardeudor = await deudorService.Listar(c => c.Nombres.Contains(valorFiltro));
        }
        else if (filtro == "Apellidos")
        {
            listardeudor = await deudorService.Listar(c => c.Apellidos.Contains(valorFiltro));
        }
        else if (filtro == "Ciudad")
        {
            listardeudor = await deudorService.Listar(c => c.Ciudad.Contains(valorFiltro));
        }
    }
    private void ShowToast(ToastType type)
    {
        string title = type switch
        {
            ToastType.Success => "¡Éxito!",
            ToastType.Primary => "Advertencia",
            ToastType.Danger => "Error",
            _ => "Información"
        };

        string message = type switch
        {
            ToastType.Success => "El prestamo se ha guardado correctamente.",
            ToastType.Primary => "El prestamo ya volvio correctamente.",
            ToastType.Danger => "Hubo un error al guardar el prestamo.",
            _ => "Información general."
        };

        Mensaje.Add(new ToastMessage { Type = type, Title = title, Message = message });
        StateHasChanged();
    }
}