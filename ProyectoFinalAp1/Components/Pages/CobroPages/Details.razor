@page "/Cobro/Details/{CobroId:int}"
@inject DeudorService deudorService
@inject PrestamoService prestamoService
@inject CobroService cobroService
@inject CobradorService CobradorService
@inject NavigationManager navigationManager
@inject IJSRuntime IJS
@rendermode InteractiveServer
@inject ToastService toastService

<PageTitle>Detalles del cobro</PageTitle>
<div class="container mt-5 pt-3">
    <div class="card shadow-lg border-0">
        <div class="card-header text-center py-5">
            <h2>Detalles del cobro</h2>
        </div>
        <Toasts class="p-3" Messages="Mensaje" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />
        <div class="card-body">
            @if (!string.IsNullOrEmpty(mensajeError))
            {
                <div class="alert alert-danger text-center">
                    @mensajeError
                </div>
            }
            else if (deudore != null)
            {
                <div class="row">
                    @* Foto de la Cedula *@
                    <div class="col-md-4 text-center mb-4">
                        <strong class="d-block mb-2">Foto de la Cédula</strong>
                        @if (!string.IsNullOrEmpty(deudore?.FotoCedulaURL))
                        {
                            <img src="@deudore.FotoCedulaURL" alt="Foto de la cédula" class="img-thumbnail shadow-sm">
                        }
                        else
                        {
                            <p class="text-muted">No disponible</p>
                        }
                    </div>
                    <div class="col-md-8">
                        <div class="row">
                            @*  Número de Cédula *@
                            <div class="col-md-6 mb-4">
                                <div class="info-block">
                                    <strong>Número de Cédula:</strong>
                                    <p class="d-block">@deudore?.NumeroCedula</p>
                                </div>
                            </div>
                            @*  Nombre Completo *@
                            <div class="col-md-6 mb-4">
                                <div class="info-block">
                                    <strong>Nombre Completo:</strong>
                                    <p class="d-block">@deudore?.Nombres @deudore?.Apellidos</p>
                                </div>
                            </div>
                            @*  Fecha Cobro *@
                            <div class="col-md-6 mb-4">
                                <div class="info-block">
                                    <strong>Fecha Cobro:</strong>
                                    <p class="d-block">@cobro?.FechaCobro.ToString("dd/MM/yyyy")</p>
                                </div>
                            </div>
                            @* Cobrador *@
                            <div class="col-md-6 mb-4">
                                <div class="info-block">
                                    <strong>Cobrador:</strong>
                                    <p class="d-block">@cobrador?.Nombres @cobrador?.Apellidos</p>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            @*  Apellidos *@
                            <div class="col-md-6 mb-4">
                                <div class="info-block">
                                    <strong>Apellidos:</strong>
                                    <p class="d-block">@deudore?.Apellidos</p>
                                </div>
                            </div>
                            @*   Dirección *@
                            <div class="col-md-6 mb-4">
                                <div class="info-block">
                                    <strong>Dirección:</strong>
                                    <p class="d-block">@deudore?.Direccion</p>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            @*  Teléfono *@
                            <div class="col-md-6 mb-4">
                                <div class="info-block">
                                    <strong>Teléfono:</strong>
                                    <p class="d-block">@deudore?.Telefono</p>
                                </div>
                            </div>
                            @* Ciudad *@
                            <div class="col-md-6 mb-4">
                                <div class="info-block">
                                    <strong>Ciudad:</strong>
                                    <p class="d-block">@deudore?.Ciudad</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="mt-5">
                    <h4 class="text-primary">Detalles de los Cobros</h4>
                    @if (listacobrodetalle.Any())
                    {
                        <table class="table table-bordered mt-3">
                            <thead class="table-success">
                                <tr>
                                    <th>Préstamo</th>
                                    <th>Concepto</th>
                                    <th>Valor Cobrado</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var detalle in listacobrodetalle)
                                {
                                    <tr>
                                        <td>@detalle.PrestamoId</td>
                                        <td>@detalle.Prestamo?.Concepto</td>
                                        <td>$@detalle.ValorCobrado</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="row mb-3">
                            <div class="col-md-12 text-right">
                                <h5><strong>Total Importe a Pagar:</strong> $@cobro.ImporteAPagar</h5>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p class="text-center text-muted">No hay detalles de cobros disponibles para este deudor.</p>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-info text-center">
                    No se encontraron detalles para el deudor especificado.
                </div>
            }
        </div>

        <div class="card-footer text-center footer-bar">
            <button class="btn btn-lg btn-primary" @onclick="Volver">
                <i class="bi bi-arrow-left-circle-fill mt-3"></i> Volver
            </button>

            <button class="btn btn-lg btn-cris ms-3" @onclick="GenerarFactura">
                <i class="bi bi-receipt mt-3"></i> Generar Factura
            </button>

            <button type="button" @onclick="EnviarMensajeWhatsApp" class="btn btn-lg btn-whatsapp">
                <span class="bi bi-whatsapp mt-3"></span> Finalizar
            </button>
        </div>

    </div>
</div>

@code {
    [Parameter] public int CobroId { get; set; }
    private Deudores deudore;
    public Cobradores? cobrador = new Cobradores();
    private CobrosDetalle cobrodetalle = new();
    private List<CobrosDetalle> listacobrodetalle = new();
    private List<Prestamos> ListaPrestamos = new();
    public List<Cobradores> listacobradores = new List<Cobradores>();
    private Cobros cobro = new();
    private string mensajeError;
    List<ToastMessage> Mensaje = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (CobroId > 0)
            {
                cobro = await cobroService.Buscar(CobroId);
                if (cobro != null)
                {
                    deudore = await deudorService.Buscar(cobro.DeudorId);
                    ListaPrestamos = await prestamoService.ObtenerPrestamosPorDeudor(cobro.DeudorId);
                    listacobrodetalle = cobro.CobrosDetalles.ToList();
                    cobrador = await CobradorService.Buscar(cobro.CobradorId);

                    foreach (var detalle in listacobrodetalle)
                    {
                        detalle.Prestamo = ListaPrestamos.FirstOrDefault(p => p.PrestamoId == detalle.PrestamoId);
                    }
                }
                else
                {
                    mensajeError = "No se encontró el cobro especificado.";
                }
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al inicializar el componente: {ex.Message}";
        }
    }
    private async Task GenerarFactura()
    {
        await IJS.InvokeAsync<object>("open", new object[] { $"/Cobro/FacturaCobro/{CobroId}" });
        toastService.Notify(new ToastMessage(
            ToastType.Success,
            iconName: IconName.None,
            title: "Factura Generada",
            message: "La factura ha sido generada con éxito."));
        await Task.Delay(3000);
    }

    private string ObtenerUrlWhatsApp()
    {
        if (deudore?.Telefono != null)
        {
            string mensaje = $"El Cobro con ID {cobro?.CobroId} para {deudore?.Nombres} ya está finalizado.";
            return $"https://wa.me/{deudore.Telefono}?text={Uri.EscapeDataString(mensaje)}";
        }
        return "#";
    }

    private async Task EnviarMensajeWhatsApp()
    {
        string urlWhatsApp = ObtenerUrlWhatsApp();
        if (urlWhatsApp != "#")
        {
            navigationManager.NavigateTo(urlWhatsApp, true);
        }
    }
    private async Task Volver()
    {
        navigationManager.NavigateTo("/Cobro/Index");
    }

    private void ShowToast(ToastType type)
    {
        string title = type switch
        {
            ToastType.Success => "¡Éxito!",
            ToastType.Primary => "Advertencia",
            ToastType.Danger => "Error",
            _ => "Información"
        };

        string message = type switch
        {
            ToastType.Success => "El Cobro se ha guardado correctamente.",
            ToastType.Primary => "El Cobro ya volvio correctamente.",
            ToastType.Danger => "Hubo un error al guardar el cobro.",
            _ => "Información general."
        };

        Mensaje.Add(new ToastMessage { Type = type, Title = title, Message = message });
        StateHasChanged();
    }
}