@page "/Cobro/Create"
@inject DeudorService deudorService
@inject PrestamoService prestamoService
@inject CobroService cobroService
@inject NavigationManager navigationManager
@inject ToastService toastService
@rendermode InteractiveServer

<PageTitle>Registrar Cobro</PageTitle>

<EditForm Model="cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="container-fluid">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Registrar Cobro</h3>
                <button class="btn btn-light btn-sm d-flex align-items-center" @onclick="RedirigirABusquedaCliente">
                    <span class="bi bi-person-fill-check me-2"></span>
                    <span>Buscar Deudor</span>
                </button>
            </div>

            <div class="card-body">
                <div class="row">
                    @* Información del Cliente *@
                    <div class="col-12 mb-4">
                        <h5><strong>Información del Deudor Seleccionado:</strong></h5>
                        @if (deudore != null)
                        {
                            <div class="card p-3">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div><strong><span class="info-label">Cédula:</span></strong> <span class="info-value">@deudore.NumeroCedula</span></div>
                                        <div><strong><span class="info-label">Nombre Completo:</span></strong> <span class="info-value">@deudore.Nombres @deudore.Apellidos</span></div>
                                    </div>
                                    <div class="col-md-6">
                                        <div><strong><span class="info-label">Dirección:</span></strong> <span class="info-value">@deudore.Direccion</span></div>
                                        <div><strong><span class="info-label">Teléfono:</span></strong> <span class="info-value">@deudore.Telefono</span></div>
                                        <div><strong><span class="info-label">Ciudad:</span></strong> <span class="info-value">@deudore.Ciudad</span></div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">Seleccione un deudor para hacerle un cobro.</div>
                        }
                    </div>
                </div>

                <div class="row">
                    @* Campo Préstamo *@
                    <div class="col-md-6 mb-4">
                        <label for="prestamo" class="form-label"><strong>Préstamo:</strong></label>
                        <InputSelect id="prestamo" class="form-control" @bind-Value="cobro.PrestamoId" @onchange="OnPrestamoSeleccionado">
                            <option value="">Seleccione el prestamo a cobrar:</option>
                            @foreach (var prestamo in prestamos)
                            {
                                <option value="@prestamo.PrestamoId">ID: @prestamo.PrestamoId - Saldo: @prestamo.MontoTotalPagar</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => cobro.PrestamoId)" />
                    </div>

                    @* Campo Fecha de Cobro *@
                    <div class="col-md-6 mb-4">
                        <label for="fechaCobro" class="form-label"><strong>Fecha de Cobro:</strong></label>
                        <InputDate id="fechaCobro" class="form-control" @bind-Value="cobro.FechaCobro" @onchange="CalcularMora" />
                        <ValidationMessage For="@(() => cobro.FechaCobro)" />
                    </div>
                </div>

                <div class="row">
                    @* Campo Importe a Pagar *@
                    <div class="col-md-6 mb-4">
                        <label for="importePagar" class="form-label"><strong>Importe a Pagar:</strong></label>
                        <InputNumber id="importePagar" class="form-control" @bind-Value="cobro.ImportePagar" step="0.01" />
                        <ValidationMessage For="@(() => cobro.ImportePagar)" />
                    </div>

                    @* Campo Mora *@
                    <div class="col-md-6 mb-4">
                        <label for="mora" class="form-label"><strong>Mora (opcional):</strong></label>
                        <InputNumber id="mora" class="form-control" @bind-Value="cobro.Mora" readonly />
                    </div>
                </div>
            </div>

            <div class="card-footer">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary me-2" @onclick="Nuevo">
                        <i class="bi bi-plus-circle-fill me-2"></i> Nuevo
                    </button>
                    <button type="submit" class="btn btn-outline-success me-2">
                        <i class="bi bi-save me-2"></i> Guardar
                    </button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Volver">
                        <i class="bi bi-arrow-left-circle-fill me-2"></i> Volver
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<Toasts class="p-3" Messages="Mensaje" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />

@code {
    private Deudores deudore;
    private Prestamos prestamo;
    public Cobros cobro = new();
    private List<Prestamos> prestamos = new();
    private bool existe = false;
    List<ToastMessage> Mensaje = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(navigationManager.Uri).Query);
        if (query.TryGetValue("DeudorId", out var deudorid))
        {
            deudore = await deudorService.Buscar(int.Parse(deudorid));
            cobro.DeudorId = deudore.DeudorId;
            prestamos = await prestamoService.ObtenerPrestamosPorDeudor(deudore.DeudorId);
        }
    }

    private void RedirigirABusquedaCliente() => navigationManager.NavigateTo("/Cobros/SeleccionarCliente");

    private async Task Nuevo()
    {
        cobro = new();
        deudore = null;
    }

    private void Volver() => navigationManager.NavigateTo("/menu");

    private void OnPrestamoSeleccionado(ChangeEventArgs e)
    {
        cobro.PrestamoId = int.Parse(e.Value.ToString());
        prestamo = prestamos.FirstOrDefault(p => p.PrestamoId == cobro.PrestamoId);
        CalcularMora();
    }

    private void CalcularMora()
    {
        if (cobro.PrestamoId == 0)
        {
            cobro.Mora = 0;
            return;
        }

        var prestamo = prestamos.FirstOrDefault(p => p.PrestamoId == cobro.PrestamoId);
        if (prestamo != null)
        {
            var fechaCobro = cobro.FechaCobro ?? DateTime.Now;
            var fechaVencimiento = prestamo.FechaCobro ?? DateTime.Now;

            var diasRetraso = (fechaCobro - fechaVencimiento).Days;

            cobro.Mora = diasRetraso > 0 ? Math.Max(diasRetraso * 10, 0) : 0;
        }

        StateHasChanged();
    }

    public async Task<bool> Validar()
    {
        existe = await cobroService.Existe(cobro.CobroId);
        return !existe;
    }

   

    public async Task Guardar()
    {
        if (!await Validar())
        {
          
            return;
        }

        var guardado = await cobroService.Guardar(cobro);
        if (guardado)
        {
            toastService.Notify(new(ToastType.Success, "Éxito", "Se guardó correctamente."));
            Volver();
        }
       
    }

}
