@page "/Cobro/Create"
@inject DeudorService deudorService
@inject PrestamoService prestamoService
@inject CobroService cobroService
@inject NavigationManager navigationManager
@inject ToastService toastService
@rendermode InteractiveServer

<PageTitle>Registrar Cobro</PageTitle>
<EditForm Model="cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="container-fluid pt-15 mt-5 d-flex flex-column justify-content-center">
        <div class="card shadow-lg w-100">
            <div class="card-header d-flex justify-content-between align-items-center" style="background-color: #008DD9; color: #fff;">
                <h3 class="card-title text-center w-100">Registrar Cobro</h3>
                <button class="btn btn-light btn-sm" @onclick="RedirigirABusquedaCliente">
                    <span class="bi bi-person-fill-check me-2"></span> Buscar Deudor
                </button>
            </div>

            <div class="card-body">
                <div class="row">
                    @* Información del Cliente *@
                    <div class="col-12 mb-4">
                        <h5 style="color: #008DD9;">Información del Cliente Seleccionado</h5>
                        @if (deudore != null)
                        {
                            <div class="card" style="background-color: #4A667F; color: #ffffff; padding: 15px;">
                                <strong>Nombre:</strong> @deudore.Nombres @deudore.Apellidos<br />
                                <strong>Cédula:</strong> @deudore.NumeroCedula
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">Seleccione un deudor para hacerle un cobro.</div>
                        }
                    </div>
                </div>

                <div class="row">
                    @* Campo Préstamo *@
                    <div class="col-md-6 mb-4">
                        <label for="prestamo" class="form-label"><strong>Préstamo:</strong></label>
                        <InputSelect id="prestamo" class="form-control" @bind-Value="cobro.PrestamoId" @onchange="OnPrestamoSeleccionado">
                            <option value="">Seleccione</option>
                            @foreach (var prestamo in prestamos)
                            {
                                <option value="@prestamo.PrestamoId">ID: @prestamo.PrestamoId - Saldo: @prestamo.Saldo</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => cobro.PrestamoId)" />
                    </div>

                    @* Campo Fecha de Cobro *@
                    <div class="col-md-6 mb-4">
                        <label for="fechaCobro" class="form-label"><strong>Fecha de Cobro:</strong></label>
                        <InputDate id="fechaCobro" class="form-control" @bind-Value="cobro.FechaCobro" @onchange="CalcularMora" />
                        <ValidationMessage For="@(() => cobro.FechaCobro)" />
                    </div>
                </div>

                <div class="row">
                    @* Campo Importe a Pagar *@
                    <div class="col-md-6 mb-4">
                        <label for="importePagar" class="form-label"><strong>Importe a Pagar:</strong></label>
                        <InputNumber id="importePagar" class="form-control" @bind-Value="cobro.ImportePagar" step="0.01" />
                        <ValidationMessage For="@(() => cobro.ImportePagar)" />
                    </div>

                    @* Campo Mora *@
                    <div class="col-md-6 mb-4">
                        <label for="mora" class="form-label"><strong>Mora (opcional):</strong></label>
                        <InputNumber id="mora" class="form-control" style="border-color: #4A667F;" @bind-Value="cobro.Mora" readonly />
                    </div>
                </div>
            </div>

            <div class="card-footer justify-content-center text-center custom-footer mt-5 pt-4">
                <div class="btn-group">
                    <button type="button" @onclick="Nuevo" class="btn btn-outline-primary">
                        <span class="bi bi-plus-circle-fill mt-3"></span>
                        Nuevo
                    </button>
                    <button type="submit" class="btn btn-outline-success">
                        <span class="bi bi-floppy mt-3"></span>
                        Guardar
                    </button>
                    <button type="button" @onclick="Volver" class="btn btn-outline-danger">
                        <span class="bi bi-arrow-left-circle-fill mt-3"></span>
                        Volver
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<Toasts class="p-3" Messages="Mensaje" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />

@code {
    private Deudores deudore;
    public Cobros cobro = new();
    private List<Prestamos> prestamos = new();
    List<ToastMessage> Mensaje = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(navigationManager.Uri).Query);
        if (query.TryGetValue("DeudorId", out var deudorid))
        {
            deudore = await deudorService.Buscar(int.Parse(deudorid));
            cobro.DeudorId = deudore.DeudorId;
            prestamos = await prestamoService.ObtenerPrestamosPorDeudor(deudore.DeudorId);
        }
    }

    private void RedirigirABusquedaCliente() => navigationManager.NavigateTo("/Cobros/SeleccionarCliente");

    private async Task Nuevo()
    {
        cobro = new();
        deudore = null;
    }

    private void Volver() => navigationManager.NavigateTo("/menu");

    private void OnPrestamoSeleccionado(ChangeEventArgs e)
    {
        cobro.PrestamoId = int.Parse(e.Value.ToString());
        CalcularMora();
    }

    private void CalcularMora()
    {
        if (cobro.PrestamoId == 0)
        {
            cobro.Mora = 0;
            return;
        }

        var prestamo = prestamos.FirstOrDefault(p => p.PrestamoId == cobro.PrestamoId);
        if (prestamo != null)
        {
            var fechaCobro = cobro.FechaCobro ?? DateTime.Now;
            var fechaVencimiento = prestamo.FechaPrestamo ?? DateTime.Now;

            var diasRetraso = (fechaCobro - fechaVencimiento).Days;

            cobro.Mora = diasRetraso > 0 ? Math.Max(diasRetraso * 10, 0) : 0;
        }

        StateHasChanged();
    }

    private async Task Guardar()
    {
        if (deudore == null || cobro.PrestamoId == 0)
        {
            toastService.Notify(new(ToastType.Warning, title: "Atención", message: "Selecciona un deudor y un préstamo."));
            return;
        }

        try
        {
            var prestamo = await prestamoService.ObtenerPrestamoPorId(cobro.PrestamoId);
            if (prestamo != null)
            {
                var fechaInicio = prestamo.FechaPrestamo ?? DateTime.Now;
                var fechaCobro = cobro.FechaCobro ?? DateTime.Now;
                var diasRetraso = (fechaCobro - fechaInicio).Days;

                // Calcula la mora si hay días de retraso
                cobro.Mora = diasRetraso > 0 ? Math.Max(diasRetraso * 10, 0) : 0;

                // Suma la mora al importe total a pagar
                cobro.ImportePagar += cobro.Mora ?? 0;

                // Actualiza el saldo del préstamo
                prestamo.Saldo = Math.Max((prestamo.Saldo ??0m) - (decimal)cobro.ImportePagar,0m);


                // Lógica para calcular la siguiente fecha de pago
                if (prestamo.FormaPago == "Quincenal")
                {
                    // Agrega 15 días para pagos quincenales
                    prestamo.FechaPrestamo = fechaCobro.AddDays(15);
                }
                else if (prestamo.FormaPago == "Semanal")
                {
                    // Agrega 7 días para pagos semanales
                    prestamo.FechaPrestamo = fechaCobro.AddDays(7);
                }

                // Actualiza el préstamo en la base de datos
                await prestamoService.ActualizarPrestamo(prestamo);
            }

            // Guarda el cobro en la base de datos
            await cobroService.Guardar(cobro);

            toastService.Notify(new(ToastType.Success, title: "Éxito", message: "Cobro registrado correctamente."));
            await Task.Delay(3000);
            Volver();
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, title: "Error", message: $"Error: {ex.Message}"));
        }
    }
}