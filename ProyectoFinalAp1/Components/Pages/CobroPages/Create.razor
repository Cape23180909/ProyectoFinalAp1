@page "/Cobro/Create"
@inject DeudorService deudorService
@inject PrestamoService prestamoService
@inject CobroService cobroService
@inject CobradorService cobradorService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Registrar Cobro</PageTitle>

<EditForm Model="cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="container-fluid pt-7 mt-5 d-flex flex-column align-items-center">
        <div class="card shadow-lg w-75">
            <div class="card-header text-center">
                <h3 class="card-title text-primary">Registrar Cobro</h3>
            </div>

            <div class="card-body">
                @* Información del Deudor *@
                <div class="border rounded p-3 mb-4">
                    <h5 class="text-secondary">Información del Deudor</h5>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="fechaCobro"><strong>Fecha Cobro:</strong></label>
                            <InputDate @bind-Value="cobro.FechaCobro" class="form-control" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="deudor"><strong>Buscar Deudor:</strong></label>
                            <button class="form-control btn btn-outline-primary d-flex align-items-center justify-content-center" @onclick="RedirijirABuscarDeudor">
                                <span class="bi bi-person-fill-check me-2"></span> Buscar
                            </button>
                        </div>
                    </div>
                </div>

                @* Información del Deudor Seleccionado *@
                <div class="border rounded p-3 mb-4">
                    <h5 class="text-secondary">Deudor Seleccionado</h5>
                    @if (deudore != null)
                    {
                        <div class="card p-3 bg-light">
                            <div class="row">
                                <div class="col-md-6">
                                    <p><strong>Cédula:</strong> @deudore.NumeroCedula</p>
                                    <p><strong>Nombre Completo:</strong> @deudore.Nombres @deudore.Apellidos</p>
                                </div>
                                <div class="col-md-6">
                                    <p><strong>Dirección:</strong> @deudore.Direccion</p>
                                    <p><strong>Teléfono:</strong> @deudore.Telefono</p>
                                    <p><strong>Ciudad:</strong> @deudore.Ciudad</p>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info text-center">Seleccione un deudor para registrar un cobro.</div>
                    }
                </div>

                @* Selección de Cobrador *@
                <div class="section mb-4">
                    <h5 class="section-title">Cobrador:</h5>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="cobrador"><strong>Seleccionar Cobrador:</strong></label>
                            <InputSelect class="form-control" @bind-Value="cobro.CobradorId">
                                <option value="">-- Seleccione un cobrador --</option>
                                @foreach (var cobrador in ListaCobradores)
                                {
                                    <option value="@cobrador.CobradorId">@cobrador.Nombres</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => cobro.CobradorId)" />
                        </div>
                    </div>

                    @* Detalle del Cobro *@
                    <div class="border rounded p-3 mb-4">
                        <h5 class="text-secondary">Detalles del Cobro</h5>
                        <div class="card p-3 bg-light mb-3">
                            <div class="row">
                                <div class="col-md-5">
                                    <label for="prestamo"><strong>Préstamo:</strong></label>
                                    <InputSelect class="form-control" @bind-Value="cobro.PrestamoId">
                                        <option value="0">-- Seleccione un préstamo --</option>
                                        @foreach (var prestamo in ListaPrestamos)
                                        {
                                            <option value="@prestamo.PrestamoId">@prestamo.Concepto (Total: $@prestamo.MontoTotalPagar)</option>
                                        }
                                    </InputSelect>
                                </div>

                                <div class="col-md-4">
                                    <label for="valorCobrado"><strong>Valor Cobrado:</strong></label>
                                    <InputNumber class="form-control" @bind-Value="cobrodetalle.ValorCobrado" />
                                    <ValidationMessage For="@(() => cobrodetalle.ValorCobrado)" />
                                </div>
                                <div class="col-md-3 d-flex align-items-center">
                                    <button class="btn btn-outline-success w-100" @onclick="AgregarDetalle">
                                        <span class="bi bi-plus-circle"></span> Agregar
                                    </button>
                                </div>
                            </div>
                        </div>

                        <table class="table table-bordered table-hover">
                            <thead class="table-success">
                                <tr>
                                    <th>Préstamo</th>
                                    <th>Concepto</th>
                                    <th>Valor Cobrado</th>
                                    <th>Acción</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var detalle in listacobrodetalle)
                                {
                                    <tr>
                                        <td>@detalle.PrestamoId</td>
                                        <td>@detalle.Prestamo?.Concepto</td>
                                        <td>$@detalle.ValorCobrado</td>
                                        <td>
                                            <button class="btn btn-outline-danger" @onclick="() => EliminarDetalle(detalle)">
                                                <span class="bi bi-trash"></span> Remover
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <div class="text-end mt-3">
                            <h5><strong>Total Cobro: </strong>$@cobro.ImportePagar</h5>
                        </div>
                    </div>
                </div>

                <div class="card-footer text-center">
                    <div class="btn-group">
                        <button class="btn btn-outline-primary" @onclick="Nuevo">
                            <span class="bi bi-plus-circle-fill"></span> Nuevo
                        </button>
                        <button class="btn btn-outline-success" type="submit">
                            <span class="bi bi-save"></span> Guardar
                        </button>
                        <button class="btn btn-outline-danger" @onclick="Volver">
                            <span class="bi bi-arrow-left-circle-fill"></span> Volver
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]
    public int CobroId { get; set; }
    private Deudores deudore;
    public Cobros cobro { get; set; } = new Cobros();
    public CobrosDetalle cobrodetalle { get; set; } = new();
    public List<CobrosDetalle> listacobrodetalle { get; set; } = new();
    public List<Prestamos> ListaPrestamos { get; set; } = new();
    public List<Cobradores> ListaCobradores { get; set; } = new();
    private bool existe = false;

    protected override async Task OnInitializedAsync()
    {
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(navigationManager.Uri).Query);
        if (query.TryGetValue("DeudorId", out var deudorid))
        {
            deudore = await deudorService.Buscar(int.Parse(deudorid));
            cobro.DeudorId = deudore.DeudorId;
            ListaPrestamos = await prestamoService.ObtenerPrestamosPorDeudor(deudore.DeudorId);
            ListaCobradores = await cobradorService.ListarCobradores();
        }
    }

    public async Task RedirijirABuscarDeudor()
    {
        navigationManager.NavigateTo("/Cobros/SeleccionarCliente");
    }

    private async Task Nuevo()
    {
        cobro = new Cobros();
        deudore = null;
        cobro.ImportePagar = 0;
    }

    public async Task<bool> Validar()
    {
        existe = await cobroService.Existe(cobro.CobroId);
        return existe;
    }

    public async Task Guardar()
    {
        try
        {
            // Validar que la fecha de cobro sea válida
            if (cobro.FechaCobro == DateTime.MinValue)
            {
                Console.WriteLine("Debe especificar una fecha de cobro.");
                return;
            }

            // Validar que el importe a pagar sea mayor que cero
            if (cobrodetalle.ValorCobrado <= 0)
            {
                Console.WriteLine("Debe especificar un monto cobrado mayor a cero.");
                return;
            }

            cobro.CobrosDetalles = listacobrodetalle;

            // Si el CobroId es nulo o no ha sido asignado, lo creamos como nuevo
            if (cobro.CobroId == 0)
            {
                // Intentamos guardar el cobro nuevo
                var guardo = await cobroService.Guardar(cobro);
                if (guardo)
                {
                    // Limpiar el formulario tras guardar
                    listacobrodetalle.Clear(); // Limpiar los detalles del cobro
                    cobro = new Cobros(); // Limpiar el objeto cobro
                    Console.WriteLine("Cobro guardado exitosamente.");
                    navigationManager.NavigateTo("/Cobro/Index"); // Redirigir al listado de cobros
                }
                else
                {
                    Console.WriteLine("Error al guardar el cobro.");
                }
            }
            else
            {
                // Si el CobroId no es 0, se asume que el cobro ya existe
                Console.WriteLine("Cobro ya existe. No se puede guardar.");
            }
        }
        catch (Exception ex)
        {
            // Manejo de excepciones
            Console.WriteLine($"Ocurrió un error al guardar el cobro: {ex.Message}");
        }
    }

    public void AgregarDetalle()
    {
        cobrodetalle.PrestamoId = cobro.PrestamoId;
        cobrodetalle.ValorCobrado = cobrodetalle.ValorCobrado;

        listacobrodetalle.Add(cobrodetalle);
        cobro.ImportePagar += cobrodetalle.ValorCobrado;

        cobrodetalle = new CobrosDetalle();
    }

    public void EliminarDetalle(CobrosDetalle detalle)
    {
        listacobrodetalle.Remove(detalle);
        cobro.ImportePagar -= detalle.ValorCobrado;
    }

    public async Task Volver()
    {
        navigationManager.NavigateTo("/Cobro/Index");
    }
}