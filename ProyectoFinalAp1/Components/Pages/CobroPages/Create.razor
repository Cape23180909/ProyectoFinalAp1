@page "/Cobro/Create"
@inject DeudorService deudorService
@inject PrestamoService prestamoService
@inject CobroService cobroService
@inject CobradorService cobradorService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Registrar Cobro</PageTitle>
<EditForm Model="cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="container-fluid pt-9 mt-5">
        <div class="card shadow-lg w-100 mx-auto">
            <div class="card-header text-white text-center">
                <h3>Registrar Cobro</h3>
            </div>

            <div class="card-body">
                <!-- Información del Deudor -->
                <div class="row mb-0">
                    <div class="col-md-4 mb-3">
                        <label for="fechaCobro"><strong>Fecha Cobro:</strong></label>
                        <InputDate @bind-Value="cobro.FechaCobro" class="form-control" />
                    </div>
                </div>

                <div class="row mb-0">
                    <div class="col-md-2 mb-3">
                        <label for="deudor"><strong>Buscar Deudor:</strong></label>
                        <button class="btn btn-outline-primary" @onclick="RedirijirABuscarDeudor">
                            <span class="bi bi-person-fill-check me-2"></span> Buscar
                        </button>
                    </div>
                </div>

                <!-- Seleccionar Cobrador -->
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label for="cobrador"><strong>Seleccionar Cobrador:</strong></label>
                        <InputSelect class="form-control form-select" @bind-Value="cobro.CobradorId">
                            <option value="0">-- Seleccione un cobrador --</option>
                            @foreach (var cobrador in ListaCobradores)
                            {
                                <option value="@cobrador.CobradorId">@cobrador.Nombres</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => cobro.CobradorId)" />
                    </div>
                </div>

                <!-- Información del Deudor Seleccionado -->
                <div class="border-success rounded p-6 mb-4">
                    <h5><strong>Informacion del Deudor Seleccionado:</strong></h5>
                    @if (deudore != null)
                    {
                        <div class="card p-3 bg-white">
                            <div class="row">
                                <div class="col-md-6">
                                    <p><strong>Cédula:</strong> @deudore.NumeroCedula</p>
                                    <p><strong>Nombre Completo:</strong> @deudore.Nombres @deudore.Apellidos</p>
                                </div>
                                <div class="col-md-6">
                                    <p><strong>Dirección:</strong> @deudore.Direccion</p>
                                    <p><strong>Teléfono:</strong> @deudore.Telefono</p>
                                    <p><strong>Ciudad:</strong> @deudore.Ciudad</p>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info text-center">Seleccione un deudor para registrar un cobro.</div>
                    }
                </div>

                <!-- Detalles del Cobro -->
                <div class="border rounded p-4 mb-14 bg-light">
                    <h5 class="text-secondary">Detalles del Cobro</h5>
                    <div class="card p-3 bg-white mb-3">
                        <div class="row">
                            <div class="col-md-5 mb-3">
                                <label for="prestamo"><strong>Préstamo:</strong></label>
                                <InputSelect class="form-control form-select" @bind-Value="cobro.PrestamoId">
                                    <option value="0">-- Seleccione un préstamo --</option>
                                    @foreach (var prestamo in ListaPrestamos)
                                    {
                                        <option value="@prestamo.PrestamoId">@prestamo.Concepto (Total: $@prestamo.MontoTotalPagar)</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="col-md-4 mb-3">
                                <label for="valorCobrado"><strong>Valor Cobrado:</strong></label>
                                <InputNumber class="form-control" @bind-Value="cobrodetalle.ValorCobrado" />
                                <ValidationMessage For="@(() => cobrodetalle.ValorCobrado)" />
                            </div>

                            <div class="col-md-3 d-flex align-items-center">
                                <button class="btn btn-outline-success w-50" @onclick="AgregarDetalle">
                                    <span class="bi bi-plus-circle"></span> Agregar
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Tabla de Detalles -->
                    <table class="table table-bordered table-striped table-hover">
                        <thead class="table-success">
                            <tr>
                                <th>Préstamo</th>
                                <th>Concepto</th>
                                <th>Valor Cobrado</th>
                                <th>Acción</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in listacobrodetalle)
                            {
                                <tr>
                                    <td>@detalle.PrestamoId</td>
                                    <td>@detalle.Prestamo?.Concepto</td>
                                    <td>$@detalle.ValorCobrado</td>
                                    <td>
                                        <button class="btn btn-outline-danger" @onclick="() => EliminarDetalle(cobrodetalle.DetalleId)">
                                            <span class="bi bi-trash"></span> Remover
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <!-- Total Cobro -->
                    <div class="text-end mt-3">
                        <h5><strong>Total Cobro: </strong>$@cobro.ImportePagar</h5>
                    </div>
                </div>

                <!-- Botones de Acción -->
                <div class="card-footer text-center">
                    <div class="btn-group">
                        <button class="btn btn-outline-primary" @onclick="Nuevo">
                            <span class="bi bi-plus-circle-fill"></span> Nuevo
                        </button>
                        <button class="btn btn-outline-success" type="submit">
                            <span class="bi bi-save"></span> Guardar
                        </button>
                        <button class="btn btn-outline-danger" @onclick="Volver">
                            <span class="bi bi-arrow-left-circle-fill"></span> Volver
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int CobroId { get; set; }
    private Deudores deudore;
    public Cobros cobro { get; set; } = new Cobros();
    public CobrosDetalle cobrodetalle { get; set; } = new CobrosDetalle();
    public List<CobrosDetalle> listacobrodetalle { get; set; } = new List<CobrosDetalle>();
    public List<Prestamos> ListaPrestamos { get; set; } = new List<Prestamos>();
    public List<Cobradores> ListaCobradores { get; set; } = new List<Cobradores>();
    private bool existe = false;

    protected override async Task OnInitializedAsync()
    {
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(navigationManager.Uri).Query);
        if (query.TryGetValue("DeudorId", out var deudorid))
        {
            deudore = await deudorService.Buscar(int.Parse(deudorid));
            cobro.DeudorId = deudore.DeudorId;
            ListaPrestamos = await prestamoService.ObtenerPrestamosPorDeudor(deudore.DeudorId);
            ListaCobradores = await cobradorService.ListarCobradores();
        }
    }

    public async Task RedirijirABuscarDeudor()
    {
        navigationManager.NavigateTo("/Cobros/SeleccionarCliente");
    }

    private async Task Nuevo()
    {
        cobro = new Cobros();
        deudore = null;
        cobro.ImportePagar = 0;
        listacobrodetalle.Clear(); // Limpiar detalles cuando se crea un nuevo cobro
    }

    public async Task<bool> Validar()
    {
        existe = await cobroService.Existe(cobro.CobroId);
        return existe;
    }

    public async Task Guardar()
    {
        if (listacobrodetalle.Count <= 0)
        {
            Console.WriteLine("Debe haber al menos 2 detalles para guardar el cobro.");
            return;
        }

        // Continuar con la lógica de guardar
        cobro.CobrosDetalles = new List<CobrosDetalle>(listacobrodetalle);
        var guardo = await cobroService.Guardar(cobro);
        if (guardo)
        {
            Console.WriteLine("Cobro guardado exitosamente.");
         
            // No hay necesidad de navegar a otra página
            // Solo se actualiza la vista actual.
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error al guardar el cobro.");
        }
    }


    public void AgregarDetalle()
    {
        if (cobrodetalle.ValorCobrado <= 0)
        {
            Console.WriteLine("El valor cobrado no puede ser menor o igual a cero.");
            return;
        }

        cobrodetalle.PrestamoId = cobro.PrestamoId;
        listacobrodetalle.Add(cobrodetalle);

        // Actualizar el total
        cobro.ImportePagar = listacobrodetalle.Sum(d => d.ValorCobrado);

        // Limpiar para agregar otro
        cobrodetalle = new CobrosDetalle();
    }


    public async Task EliminarDetalle(int detalleId)
    {
        // Buscar el detalle en la lista
        var detalle = listacobrodetalle.FirstOrDefault(d => d.DetalleId == detalleId);

        if (detalle != null)
        {
            // Restar el valor del detalle eliminado al importe total
            cobro.ImportePagar -= detalle.ValorCobrado;

            // Eliminar el detalle de la lista
            listacobrodetalle.Remove(detalle);

            Console.WriteLine("Detalle eliminado correctamente.");
        }
        else
        {
            Console.WriteLine("No se encontró el detalle a eliminar.");
        }
    }


    public async Task Volver()
    {
        navigationManager.NavigateTo("/Cobro/Index");
    }
}