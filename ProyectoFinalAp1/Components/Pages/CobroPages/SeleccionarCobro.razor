@page "/Cobros/SeleccionarCliente"
@inject DeudorService deudorService
@inject PrestamoService prestamoService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Consulta de deudores para cobros</PageTitle>

<div class="container-fluid vh-100 d-flex flex-column justify-content-center">
    <div class="card shadow-lg w-100 h-100">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3 class="card-title w-100">Consulta de Deudores para Cobros</h3>
        </div>

        <div class="card-body overflow-auto">
            <div class="row mb-4 align-items-end">
                <div class="col-md-4">
                    <label for="Filtro" class="form-label">Filtrar por:</label>
                    <select @bind="filtro" class="form-select">
                        <option value="0">Seleccione una opción</option>
                        <option value="Cedula">Cédula</option>
                        <option value="Nombres">Nombres</option>
                        <option value="Apellidos">Apellidos</option>
                        <option value="Ciudad">Ciudad</option>
                    </select>
                </div>

                <div class="col-md-6">
                    <label for="ValorFiltro" class="form-label">Búsqueda:</label>
                    <div class="input-group">
                        <input @bind="valorFiltro" class="form-control" placeholder="Buscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary">
                            <span class="bi bi-search"></span> Buscar
                        </button>
                    </div>
                </div>
            </div>

            <table class="table">
                <thead>
                    <tr>
                        <th>DeudorId</th>
                        <th>Cédula</th>
                        <th>Nombres</th>
                        <th>Apellidos</th>
                        <th>Dirección</th>
                        <th>Teléfono</th>
                        <th>Ciudad</th>
                        <th class="text-center">Seleccionar</th>
                    </tr>
                </thead>
                <tbody>
                    @if (listardeudore.Any())
                    {
                        @foreach (var deudor in listardeudore)
                        {
                            <tr>
                                <td>@deudor.DeudorId</td>
                                <td>@deudor.NumeroCedula</td>
                                <td>@deudor.Nombres</td>
                                <td>@deudor.Apellidos</td>
                                <td>@deudor.Direccion</td>
                                <td>@deudor.Telefono</td>
                                <td>@deudor.Ciudad</td>
                                <td class="text-center">
                                    <input type="checkbox" @onclick="() => SeleccionarCliente(deudor.DeudorId)" class="checkbox-seleccionar" />
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="card-footer d-flex justify-content-between">
            <p class="mb-0">Total de clientes: @listardeudore.Count</p>
        </div>
    </div>
</div>

@code {
    private List<Deudores> listardeudore = new List<Deudores>();
    private List<Prestamos> listarprestamo = new List<Prestamos>();
    public string filtro = "0";
    public string valorFiltro = "";

    protected override async Task OnInitializedAsync()
    {
        // Obtener todos los deudores
        var todosDeudores = await deudorService.ObtenerTodos();

        // Obtener todos los préstamos
        var todosPrestamos = await prestamoService.ListarPrestamosConDeudores();

        // Filtrar los deudores que tienen préstamos registrados
        listardeudore = todosDeudores
            .Where(d => todosPrestamos.Any(p => p.DeudorId == d.DeudorId))
            .ToList();

        Console.WriteLine($"Deudores con préstamos registrados: {listardeudore.Count}");
    }

    private async Task SeleccionarCliente(int deudorId)
    {
        // Navegar a la ruta de creación de cobros pasando el clienteId como parámetro
        navigationManager.NavigateTo($"/Cobro/Create?deudorId={deudorId}");
    }

    public async Task Buscar()
    {
        if (string.IsNullOrWhiteSpace(valorFiltro))
        {
            await OnInitializedAsync();
        }
        else if (filtro == "Cedula")
        {
            listardeudore = await deudorService.Listar(c => c.NumeroCedula.Contains(valorFiltro));
        }
        else if (filtro == "Nombres")
        {
            listardeudore = await deudorService.Listar(c => c.Nombres.Contains(valorFiltro));
        }
        else if (filtro == "Apellidos")
        {
            listardeudore = await deudorService.Listar(c => c.Apellidos.Contains(valorFiltro));
        }
        else if (filtro == "Ciudad")
        {
            listardeudore = await deudorService.Listar(c => c.Ciudad.Contains(valorFiltro));
        }
    }
}