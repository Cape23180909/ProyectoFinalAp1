@page "/Sucursal/Create"
@inject SucursalService sucursalService
@inject DeudorService deudorService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Registrar Sucursal</PageTitle>

<EditForm Model="sucursal" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container-fluid pt-5 mt-5 d-flex flex-column justify-content-center">
        <div class="card shadow-lg w-100">
            <div class="card-header d-flex justify-content-between align-items-center" style="background-color: #008DD9; color: #fff;">
                <h3 class="card-title text-center w-100">Registrar Sucursal</h3>
            </div>

            <div class="card-body">
                <div class="row">
                    @* SucursalId *@
                    <div class="col-md-6 mb-4">
                        <label for="SucursalId" class="form-label"><strong>SucursalId:</strong></label>
                        <InputNumber id="SucursalId" class="form-control" readonly @bind-Value="sucursal.SucursalId" />
                        <ValidationMessage For="@(() => sucursal.SucursalId)" />
                    </div>

                    @* Deudor  *@
                    <div class="col-md-6 mb-4">
                        <label for="Deudor" class="form-label"><strong>Deudor:</strong></label>
                        <InputSelect id="Deudor" class="form-control" @bind-Value="sucursal.DeudorId">
                            <option value="0">Seleccionar un deudor</option>
                            @foreach (var deudor in listadeudore)
                            {
                                <option value="@deudor.DeudorId">@deudor.Nombres</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => sucursal.DeudorId)" />
                    </div>
                </div>

                <div class="row">
                    @* NombreSucursal *@
                    <div class="col-md-6 mb-4">
                        <label for="NombreSucursal" class="form-label"><strong>Nombre Sucursal:</strong></label>
                        <InputText id="NombreSucursal" class="form-control" placeholder="Ingrese el nombre de la sucursal" @bind-Value="sucursal.NombreSucursal" />
                        <ValidationMessage For="@(() => sucursal.NombreSucursal)" />
                    </div>

                    @* Direccion *@
                    <div class="col-md-6 mb-4">
                        <label for="Direccion" class="form-label"><strong>Dirección:</strong></label>
                        <InputText id="Direccion" class="form-control" placeholder="Ingrese la dirección" @bind-Value="sucursal.Direccion" />
                        <ValidationMessage For="@(() => sucursal.Direccion)" />
                    </div>
                </div>

                <div class="row">
                    @*Telefono*@
                    <div class="col-md-6 mb-4">
                        <label for="Telefono" class="form-label"><strong>Teléfono:</strong></label>
                        <InputText id="Telefono" class="form-control" placeholder="Ingrese el número de teléfono" @bind-Value="sucursal.Telefono" />
                        <ValidationMessage For="@(() => sucursal.Telefono)" />
                    </div>

                    @*Estado*@
                    <div class="col-md-6 mb-4">
                        <label for="Estado" class="form-label"><strong>Estado:</strong></label>
                        <InputSelect id="Estado" class="form-control form-select" @bind-Value="sucursal.Estado">
                            <option value="">Seleccione el estado</option>
                            <option value="true">Activo</option>
                            <option value="false">Inactivo</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => sucursal.Estado)" />
                    </div>
                </div>
                <div class="row">
                    @* Fecha Emision *@
                    <div class="col-md-6 mb-4">
                        <label for="FechaGarantia" class="form-label text-dark"><strong>Fecha Emision:</strong></label>
                        <InputDate id="FechaGarantia" class="form-control" @bind-Value="sucursal.FechaEmision" />
                        <ValidationMessage For="@(() => sucursal.FechaEmision)" />
                    </div>

                    @*  Foto Sucursal *@
                    <div class="col-md-6 mb-4">
                        <label for="FotoSucursal" class="form-label"><strong>Foto Sucursal:</strong></label>
                        <InputText id="FotoSucursal" class="form-control" placeholder="Ingrese la URL de la foto" @bind-Value="sucursal.FotoSucursalUrl" />
                        <ValidationMessage For="@(() => sucursal.FotoSucursalUrl)" />
                    </div>
                </div>
            </div>
        </div>

        <div class="card-footer justify-content-center text-center custom-footer mt-5 pt-4">
            <div class="btn-group">
                <button type="button" @onclick="Nuevo" class="btn btn-outline-primary">
                    <span class="bi bi-plus-circle-fill mt-3"></span>
                    Nuevo
                </button>
                <button type="submit" class="btn btn-outline-success">
                    <span class="bi bi-floppy mt-3"></span>
                    Guardar
                </button>
                <button type="button" @onclick="Volver" class="btn btn-outline-danger">
                    <span class="bi bi-arrow-left-circle-fill mt-3"></span>
                    Volver
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int SucursalId { get; set; }
    public Sucursales? sucursal = new Sucursales();
    public List<Deudores> listadeudore = new List<Deudores>();
    private bool existe = false;
    private bool Estado = false;

    public async Task Nuevo()
    {
        sucursal = new Sucursales();
        existe = false;
    }

    protected override async Task OnInitializedAsync()
    {
        listadeudore = await deudorService.ListarDeudores();
    }

    public async Task Buscar()
    {
        existe = false;
        var encontrado = await sucursalService.Buscar(sucursal.SucursalId);
        if (encontrado != null)
        {
            sucursal = encontrado;
        }
        else
        {
            Nuevo();
        }
    }
    public async Task<bool> Validar()
    {
        existe = await sucursalService.Existe(sucursal.SucursalId);
        return !existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }
        var guadado = await sucursalService.Guardar(sucursal);
        if (guadado)
        {
            Volver();
        }
    }

    public async Task Volver()
    {
        navigationManager.NavigateTo("/sucursal/Index");
    }
}