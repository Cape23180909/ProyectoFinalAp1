@page "/Pago/Create"
@inject PagoService pagoService
@inject DeudorService deudorService
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@inject ToastService toastService

<PageTitle>Consulta de pagos</PageTitle>
<EditForm Model="pago" OnValidSubmit="Guardar">
    <DataAnnotationsValidator/>
    <div class="container-fluid vh-100 d-flex flex-column justify-content-center">
        <div class="card shadow-lg w-100 h-100">
            <div class="card-header d-flex justify-content-between align-items-center " style="background-color: #008DD9; color: #fff;">
                <h3 class="card-title text-center w-100">Registros de Pagos</h3>
            </div>

            <div class="card-body">
                <div class="row">
                    @*   PagoId *@
                    <div class="col-md-10 mb-5">
                        <label for="PagoId" class="form-label"><strong>PagoId:</strong></label>
                        <div class="input-group">
                            <div style="width: 40%; height: 1mm;">
                                <InputNumber @bind-Value="pago.PagoId" class="form-control" disabled />
                            </div>
                        </div>
                    </div>
                    @*   Deudor *@
                    <div class="mb-5">
                        <label for="Deudor" class="form-label"><strong>Deudor:</strong></label>
                        <InputSelect class="form-control" @bind-Value="pago.DeudorId">
                            <option value="0" disabled>Selecionar un deudor</option>
                            @foreach (var deudor in listadeudore)
                            {
                                <option value="@deudor.DeudorId">@deudor.Nombres</option>
                            }
                        </InputSelect>
                    </div>
                    @*   Capital *@
                    <div class="mb-5">
                        <label for="Capital" class="form-label"><strong>Capital:</strong></label>
                        <InputNumber @bind-Value="pago.Capital" class="form-control" />
                        <ValidationMessage For="@(()=>pago.Capital)" />
                    </div>
                    @*   PagoPendiente *@
                    <div class="mb-5">
                        <label for=" PagoPendiente" class="form-label"><strong> PagoPendiente:</strong></label>
                        <InputNumber @bind-Value="pago.PagoPendiente" class="form-control" />
                        <ValidationMessage For="@(()=>pago.PagoPendiente)" />
                    </div>
                    @*   FechaPago *@
                    <div class="mb-5">
                        <label for="FechaPago" class="form-label"><strong>FechaPago:</strong></label>
                        <InputDate @bind-Value="pago.FechaPago" class="form-control" />
                        <ValidationMessage For="@(()=>pago.FechaPago)" />
                    </div>

                    <div class="card-footer justify-content-center text-center">
                        <div class="btn-group">
                            <button type="button" @onclick="Nuevo" class="btn btn-outline-primary">
                                <span class="bi bi-plus-circle-fill mt-3"></span>
                               Nuevo
                            </button>
                            <button type="submit" class="btn btn-outline-success">
                                <span class="bi bi-floppy mt-3"></span>
                                Guardar
                            </button>
                            <button type="button" @onclick="Volver" class="btn btn-outline-danger">
                                <span class="bi bi-arrow-left-circle-fill mt-3"></span>
                                Volver
                            </button>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int PagoId{ get; set; }
    public Pagos? pago { get; set; } = new Pagos();
    public List<Pagos> Listapago { get; set; } = new List<Pagos>();
    public List<Deudores> listadeudore { get; set; } = new List<Deudores>();
    private bool existe = false;

    public async Task Nuevo()
    {
        pago = new Pagos();
        existe = false;
    }
    protected override async Task OnInitializedAsync()
    {
            listadeudore = await deudorService.ListarDeudores();
    }
    public async Task Buscar()
    {
        existe = false;
        var encontrado = await pagoService.Buscar(pago.PagoId);
        if (encontrado != null)
        {
            pago = encontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task<bool> Validar()
    {
        existe = await pagoService.Existe(pago.PagoId);
        return !existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }
        var guadado = await pagoService.Guardar(pago);
        if (guadado)
        {
            toastService.Notify(new(ToastType.Success, "Existo", "Se guardo correctamente"));
        }
    }
   
    public async Task Volver()
    {
       
        toastService.Notify(new(ToastType.Primary, "Existo", "Ya volvio correctamente"));
        navigationManager.NavigateTo("/menu");
    }
}
