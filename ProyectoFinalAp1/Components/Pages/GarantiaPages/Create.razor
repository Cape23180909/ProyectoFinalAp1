@page "/Garantia/Create"
@inject DeudorService deudorService
@inject PrestamoService prestamoService
@inject GarantiaService garantiaService
@inject NavigationManager navigationManager
@inject ToastService toastService
@rendermode InteractiveServer

<PageTitle>Registrar Garantía</PageTitle>
<EditForm Model="garantia" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="container-fluid">
        <div class="card shadow-lg w-100">
            @* Encabezado  *@
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="card-title text-center w-100">Registrar Garantía</h3>
            </div>

            <div class="card-body">
                <div class="row">
                    @* Garantía ID  *@
                    <div class="col-md-6 mb-4">
                        <label for="GarantiaId" class="form-label text-dark"><strong>Garantía ID:</strong></label>
                        <InputNumber id="GarantiaId" class="form-control" readonly @bind-Value="garantia.GarantiaId" />
                        <ValidationMessage For="@(() => garantia.GarantiaId)" />
                    </div>
                </div>

                <div class="row">
                    @* Valor de la Garantía  *@
                    <div class="col-md-6 mb-4">
                        <label for="ValorGarantia" class="form-label text-dark"><strong>Valor de la Garantía:</strong></label>
                        <InputNumber id="ValorGarantia" class="form-control" @bind-Value="garantia.ValorGarantia" readonly />
                        <ValidationMessage For="@(() => garantia.ValorGarantia)" />
                    </div>

                    @*  Fecha de la Garantía  *@
                    <div class="col-md-6 mb-4">
                        <label for="FechaGarantia" class="form-label text-dark"><strong>Fecha de la Garantía:</strong></label>
                        <InputDate id="FechaGarantia" class="form-control" @bind-Value="garantia.FechaGarantia" />
                        <ValidationMessage For="@(() => garantia.FechaGarantia)" />
                    </div>
                </div>

                <div class="row">
                    @* Deudor  *@
                    <div class="col-md-6 mb-4">
                        <label for="Deudor" class="form-label text-dark"><strong>Deudor:</strong></label>
                        <InputSelect id="Deudor" class="form-control" @bind-Value="garantia.DeudorId">
                            <option value="">Seleccionar un deudor</option>
                            @foreach (var deudor in listadeudore)
                            {
                                <option value="@deudor.DeudorId">@deudor.Nombres</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => garantia.DeudorId)" />
                    </div>
                </div>

                <div class="row">
                    @* Préstamo  *@
                    <div class="col-md-6 mb-4">
                        <label for="Prestamo" class="form-label text-dark"><strong>Préstamo:</strong></label>
                        <InputSelect id="Prestamos" class="form-control" @bind-Value="garantia.PrestamoId">
                            <option value="">Seleccionar un préstamo</option>
                            @foreach (var prestamo in listaprestamo)
                            {
                                <option value="@prestamo.PrestamoId">@prestamo.PrestamoId</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => garantia.PrestamoId)" />
                    </div>
                </div>
            </div>

            <div class="border rounded p-4 mb-4 detalles-garantia-border">
                <h5 class="text-black">Detalles de las Garantías</h5>
                <div class="row mb-3">
                    @* Articulo *@
                    <div class="col-md-4">
                        <label for="Articulo" class="form-label text-dark"><strong>Artículo:</strong></label>
                        <InputText class="form-control" placeholder="Artículo" @bind-Value="detalle.Articulo" />
                        <ValidationMessage For="@(() => detalle.Articulo)" />
                    </div>
                    @*  Cantidad *@
                    <div class="col-md-2">
                        <label for="Cantidad" class="form-label text-dark"><strong>Cantidad:</strong></label>
                        <InputNumber class="form-control" @bind-Value="detalle.Cantidad" />
                        <ValidationMessage For="@(() => detalle.Cantidad)" />
                    </div>
                    @* Valor Unitario *@
                    <div class="col-md-3">
                        <label for="ValorUnitario" class="form-label text-dark"><strong>Valor Unitario:</strong></label>
                        <InputNumber class="form-control" @bind-Value="detalle.ValorUnitario" />
                        <ValidationMessage For="@(() => detalle.ValorUnitario)" />
                    </div>
                    @*  Foto *@
                    <div class="col-md-3">
                        <label for="Foto" class="form-label text-dark"><strong>Foto:</strong></label>
                        <InputText class="form-control" placeholder="URL de la foto" @bind-Value="detalle.FotoDetalleUrl" />
                        <ValidationMessage For="@(() => detalle.FotoDetalleUrl)" />
                    </div>

                </div>
                @* Boton Agregar *@
                <div class="col-md-12 d-flex justify-content-end">
                    <button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle">
                        <span class="bi bi-plus-circle"></span> Agregar
                    </button>
                </div>

                <table class="table table-bordered table-hover mt-3">

                    <thead>
                        <tr class="text-center">
                            <th>Artículo</th>
                            <th>Cantidad</th>
                            <th>Valor Unitario</th>
                            <th>Foto Garantia</th>
                            <th>Total</th>
                            <th>Acción</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (listadestalles.Any())
                        {
                            @foreach (var detalle in listadestalles)
                            {
                                <tr class="text-center">
                                    <td>@detalle.Articulo</td>
                                    <td>@detalle.Cantidad</td>
                                    <td>$@detalle.ValorUnitario</td>

                                    <td class="text-center">
                                        @if (!string.IsNullOrEmpty(detalle.FotoDetalleUrl))
                                        {
                                            <img src="@detalle.FotoDetalleUrl" alt="Foto del artículo" />
                                        }
                                        else
                                        {
                                            <span>No disponible</span>
                                        }
                                    </td>
                                    <td>@detalle.Total</td>


                                    <td>
                                        <button type="button" class="btn btn-outline-danger" @onclick="() => EliminarDetalle(detalle)">
                                            <span class="bi bi-trash"></span> Remover
                                        </button>
                                    </td>

                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center">No hay detalles agregados.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="card-footer justify-content-center text-center custom-footer">
                <div class="btn-group">
                    <button type="button" @onclick="Nuevo" class="btn btn-outline-primary">
                        <span class="bi bi-plus-circle-fill mt-3"></span> Nuevo
                    </button>
                    <button type="submit" class="btn btn-outline-success">
                        <span class="bi bi-floppy mt-3"></span> Guardar
                    </button>
                    <button type="button" @onclick="Volver" class="btn btn-outline-danger">
                        <span class="bi bi-arrow-left-circle-fill mt-3"></span> Volver
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int GarantiaId { get; set; }
    public Garantias garantia = new Garantias();
    public List<Garantias> listagarantias = new List<Garantias>();
    public List<Prestamos> listaprestamo = new List<Prestamos>();
    public List<Prestamos> listaprestamoFiltrados = new List<Prestamos>();
    public List<Deudores> listadeudore = new List<Deudores>();
    public GarantiasDetalle detalle { get; set; } = new GarantiasDetalle();
    public List<GarantiasDetalle> listadestalles = new List<GarantiasDetalle>();

    private bool existe = false;
    public decimal gananciaTotal = 0;
    private List<int> detallesAEliminar = new();

    protected override async Task OnInitializedAsync()
    {
        listadeudore = await deudorService.ListarDeudores();
        listaprestamo = await prestamoService.ListarPrestamos();
    }

    public async Task Guardar()
    {
        if (garantia.DeudorId == null || garantia.PrestamoId == null || listadestalles.Count == 0)
        {
            return;
        }

        if (detallesAEliminar.Any())
        {
            bool detallesEliminados = await garantiaService.EliminarDetalles(detallesAEliminar);
            if (!detallesEliminados)
            {

                return;
            }
            detallesAEliminar.Clear();
        }

        garantia.Detalles = listadestalles;

        if (await garantiaService.Guardar(garantia))
        {
            navigationManager.NavigateTo("/garantia/Index");
        }
    }
    private async Task Volver()
    {
        navigationManager.NavigateTo("/garantia/Index");
    }

    private async Task Nuevo()
    {
        garantia = new Garantias();
        detalle = new GarantiasDetalle();
        listadestalles.Clear();
    }

    private async Task AgregarDetalle()
    {
        detalle.Total = detalle.Cantidad * detalle.ValorUnitario;
        listadestalles.Add(detalle);
        ActualizarValorGarantia();
        detalle = new GarantiasDetalle();
    }

    private async Task EliminarDetalle(GarantiasDetalle detalle)
    {
        if (detalle.DetalleId != 0)
        {
            detallesAEliminar.Add(detalle.DetalleId);
        }
        listadestalles.Remove(detalle);
        ActualizarValorGarantia();
        StateHasChanged();
    }

    private async Task ActualizarValorGarantia()
    {
        garantia.ValorGarantia = listadestalles.Sum(detalle => detalle.Total);
    }

    private async Task CalcularGananciaTotal()
    {
        gananciaTotal = listadestalles.Sum(d => d.Total ?? 0);
    }
}