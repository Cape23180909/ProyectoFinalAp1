@page "/Deudor/Seleccionar"
@inject DeudorService deudorService
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@inject ToastService toastService

<PageTitle>Seleccionar Deudor</PageTitle>
<div class="container-fluid vh-100 d-flex flex-column justify-content-center">
    <div class="card shadow-lg w-100 h-100">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3 class="card-title text-center w-100">Selecciona el Deudor para ver su Historial</h3>
        </div>
        <Toasts class="p-3" Messages="Mensaje" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />
        <div class="card-body overflow-auto">
            @* Filtro de búsqueda *@
            <div class="row mb-4 align-items-end">
                <div class="col-md-4">
                    <label for="Filtro" class="form-label"><strong>Filtrar por:</strong></label>
                    <select @bind="filtro" class="form-select">
                        <option value="0">Seleccione una opción</option>
                        <option value="NumeroCedula">Numero Cedula</option>
                        <option value="Nombres">Nombres</option>
                        <option value="Apellidos">Apellidos</option>
                    </select>
                </div>

                <div class="col-md-5">
                    <label for="ValorFiltro" class="form-label"><strong>Buscar deudor:</strong></label>
                    <div class="input-group">
                        <input @bind="valorFiltro" class="form-control" placeholder="Ingrese valor a buscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button">
                            <span class="bi bi-search"></span> Buscar
                        </button>
                    </div>
                </div>
            </div>

            <table class="table table-hover table-striped text-center">
                <thead class="table-light">
                    <tr>
                        <th>ClienteId</th>
                        <th>Numero Cedula</th>
                        <th>Nombre</th>
                        <th>Apellido</th>
                        <th>Ver</th>
                    </tr>
                </thead>
                <tbody>
                    @if (deudore?.Any() == true)
                    {
                        @foreach (var deudor in deudore)
                        {
                            <tr>
                                <td>@deudor.DeudorId</td>
                                <td>@deudor.NumeroCedula</td>
                                <td>@deudor.Nombres</td>
                                <td>@deudor.Apellidos</td>
                                <td>
                                    <button class="btn btn-outline-success btn-sm rounded-pill" @onclick="() => NavegarADeudorHistorial(deudor.DeudorId)">
                                        <span class="bi bi-eye"></span> Ver Historial
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-danger text-center">No se encontraron deudores con préstamos registrados.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="card-footer d-flex justify-content-between">
            <p class="mb-0">Total de deudores: @deudore?.Count</p>
        </div>
    </div>
</div>

@code {
    private List<Deudores> deudore = new();
    private string filtro = "0";
    private string valorFiltro = "";
    List<ToastMessage> Mensaje = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        await CargarDEudoreConPrestamos();
    }

    private async Task CargarDEudoreConPrestamos()
    {
        deudore = await deudorService.ObtenerDeudoreConPrestamos();
    }

    private async Task Buscar()
    {
        if (string.IsNullOrWhiteSpace(valorFiltro))
        {
            await CargarDEudoreConPrestamos();
        }
        else
        {
            deudore = filtro switch
            {
                "NumeroCedula" => await deudorService.Listar(c => c.NumeroCedula.Contains(valorFiltro) && c.Prestamos.Any()),
                "Nombres" => await deudorService.Listar(c => c.Nombres.Contains(valorFiltro) && c.Prestamos.Any()),
                "Apellidos" => await deudorService.Listar(c => c.Apellidos.Contains(valorFiltro) && c.Prestamos.Any()),
                _ => deudore
            };
        }
    }

    private async Task NavegarADeudorHistorial(int DeudorId)
    {
        toastService.Notify(new ToastMessage(
             ToastType.Success,
             iconName: IconName.None,
             title: "Deudor Seleccionado",
             message: "El historial del deudor ha sido cargado exitosamente."
         ));
        await Task.Delay(3000);
        navigationManager.NavigateTo($"/Deudor/Historial/{DeudorId}");
    }

    private async Task Volver()
    {
        navigationManager.NavigateTo("/menu");
    }
    private void ShowToast(ToastType type)
    {
        string title = type switch
        {
            ToastType.Success => "¡Éxito!",
            ToastType.Primary => "Advertencia",
            ToastType.Danger => "Error",
            _ => "Información"
        };

        string message = type switch
        {
            ToastType.Success => "La garantia se ha guardado correctamente.",
            ToastType.Primary => "La garantia ya volvio correctamente.",
            ToastType.Danger => "Hubo un error al guardar la garantia.",
            _ => "Información general."
        };

        Mensaje.Add(new ToastMessage { Type = type, Title = title, Message = message });
        StateHasChanged();
    }
}